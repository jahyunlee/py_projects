1. 파이썬 기본
 - 단일데이터(단일 타입)
  > 수치형 : 정수, 부동소수, 진법
  > 문자열(연속이지만, 이쪽으로도 분류한다)
            : 표현, 사용이유, 인덱싱, 슬라이싱, 포멧팅, 
              유니버셜함수(주요멤버함수) -> 가장 중요하기 때문
              전처리, 정규식 체크(데이터 수집 이후 등장)
  > 블린형 : -> 조건문 연결, 결론 : False 상황만 기억한다
                False:0, '', [], {}, (), None 다 펄스

 - 연속데이터(시퀀스타입)
  > 리스트      : [] -> js의 배열과 동일, 인덱서는 정방향/역방향(-1,-2,...)존재
  > 딕셔너리    : {} -> js의 객체와 동일, 순서 X, 키:값,
                        키는 중복되면 no, 값 중복 ok
  > 튜플        : () -> *수정불가, ]본질[ 값을 묶는다!! (관계없는 데이터들을),
                        순서ok, 정방향/역방향(확인) 
  > 집합        : set() -> 중복제거 후 리스트로 변환해서 처리
                        교집합, 합집합, 차집합 => 느려서!! => pandas에서 해결

 - 반복문, 조건문, 제어문, 등등 => 코드블럭 등장(:)
  > if, while, for, ..., break, continue 
 => 절차적 프로그램 (동기식)
-----------------------------------------------------------------------------------------
- 함수
- 함수종류
  => 내장함수 외장함수, 사용자 정의함수, 
    람다표현(데이터 분석시 등장) //람다 : 고급주제 -> 처리속도, 메모리 점유등이 더 효율적
  => 함수 지향적 프로그램 (동기식)
    -> 엔트리 포인트를 구성

------------------------------------------------------------------------------------------
- 클래스
  > 상속, 멤버, 생성자, 객체생성
- 모듈화 + 패키지
  > 모듈 만들기, 테스트 코드 배치, 모듈 가져오기, 패키시 사용
- 예외처리
  > 풀코드 형태 확인
=> 객체 지향적 프로그램 
  -> GUI 모드 구성, 파이썬 웹 구성시 모듈 부분으로 사용
------------------------------------------------------------------------------------------


- 최초1회만
  만약, 프로젝트를 먼저 작업하다가, git를 사용한 경우
  1) git clone을 다른 위치에서 수행
  2) clone를 통해 만들어진 위치에 먼저 만들어진 프로젝트 내용 이동
  3) vs code에서 commit , push 작업 진행
  4) 단, 최초 수행시 git 오류가 나올 수 있고, 이 경우
   $ git config --global user.name "jahyunlee"
   $ git config --global user.email "jahyun517@naver.com"
   1회 수행해 주면( 현재 pjt위치에서 ) 처리된다
  5) 앞으로는 clone 한 프로젝트 위치가 실제 작업할 곳이 된다
  6) // 전체 프로젝트 리드미 수정 -> commit changes : + 

   // 아침에 push pull 퇴근할때 push하기




